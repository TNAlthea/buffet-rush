function random_customer(self)
	local RENDANG = hash("rendang")
	local STEAK = hash("steak")
	local IKANTELURASIN = hash("ikantelurasin")
	
	local rand = math.random(1, 3)
	print(rand)
	if rand == 1 then
		customer_queue(self, RENDANG)
	elseif rand == 2 then
		customer_queue(self, STEAK)
	elseif rand == 3 then
		customer_queue(self, IKANTELURASIN)
	end
	
end

function customer_queue(self, customer_id)
	local customer = self.listCustomer[customer_id]
	print("tesuto", customer_id)
	if self.customerQueue.currentCustomerCount + 1 > self.customerQueue.maxCustomer then
		return false, "Customer queue is full!"
	end	
	table.insert(self.customerQueue.customer, customer)
	self.customerQueue.currentCustomerCount = self.customerQueue.currentCustomerCount + 1
	
	return true
end 

function active_customer(self, customer_id)
	local customer = self.customerQueue.customer[customer_id]

	if self.activeCustomer.activeCount + 1 > self.activeCustomer.maxActive then
		return false, "Active queue is full!"
	end

	table.insert(self.activeQueue.customer, customer)
	print(self.activeQueue.customer.patience)
	self.activeCustomer.activeCount = self.activeCustomer.activeCount + 1
	return true 
end

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	msg.post("#", "show_game")
	msg.post(".", "acquire_input_focus")

	local RENDANG = hash("rendang")
	local STEAK = hash("steak")
	local IKANTELURASIN = hash("ikantelurasin")
	
	self.active = false
	
	self.turns = 30
	self.points = 0
	self.combos = 0
	self.prevMessage = nil
	self.customerQueueCount = 1
	self.newCustomerTurns = 1
	self.queue = {}

	self.listCustomer = {
		[RENDANG] = {
			meatReq = 4,
			riceReq = 5,
			patience = 8,
			bonusPoints = 10,
			penalty = 5,
		},
		[STEAK] = {
			meatReq = 6,
			riceReq = 3,
			sausageReq = 3,
			cheeseReq = 2,
			patience = 12,
			bonusPoints = 14,
			penalty = 7,
		},
		[IKANTELURASIN] = {
			fishReq = 6,
			eggReq = 2,
			riceReq = 4,
			patience = 7,
			bonusPoints = 7,
			penalty = 3,
		},
	}
	
	self.customerQueue = {
		currentCustomerCount = 0,
		maxCustomer = 5,
		customer = {},
	}

	self.activeCustomer = {
		activeCount = 0,
		maxActive = 3,
		customer = {},
	}

	random_customer(self)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	local turns_node = gui.get_node("turnsTickerCounter")
	local points_node = gui.get_node("pointsCounter")

	if message_id == hash("show_game") then
		msg.post("#", "enable")
		self.active = true
	end
	
	if message_id == hash("reduce_turns") then
		self.turns = self.turns - 1
		gui.set_text(turns_node, self.turns)
		self.prevMessage = message_id

		local gui_root = gui.get_node("listQueue")
		if self.customerQueueCount < 3 and self.newCustomerTurns == 0 then
			local cloned_gui=gui.clone_tree(gui_root)
			
			gui.set_id(cloned_gui[hash("listQueue")], "listQueue" .. self.customerQueueCount)
			
			local pos = gui.get_position(gui_root)
			local newPos = pos + vmath.vector3(300 * self.customerQueueCount, 0, 0)
			
			gui.animate(cloned_gui[hash("listQueue")], gui.PROP_POSITION, newPos, gui.EASING_INOUTSINE, 0.7)

			random_customer(self)
			self.customerQueueCount = self.customerQueueCount + 1
			self.newCustomerTurns = 1
			
		end
		if self.newCustomerTurns > 0 then
			self.newCustomerTurns = self.newCustomerTurns - 1
		end
		
	end
	if message_id == hash("combos") and self.prevMessage == hash("reduce_turns") then
		self.prevMessage = message_id
	end 
	if message_id == hash("update_points") and self.prevMessage == hash("reduce_turns") then
		self.points = self.points + message.points
		gui.set_text(points_node, self.points)
		self.prevMessage = hash("reduce_turns") -- in case of continous match so this function can be called repeatedly until the combo ends 
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed

	if action_id == hash("touch") and action.pressed and self.active then
		if gui.pick_node(gui.get_node("pause"), action.x, action.y) then
			local i = 0
			for _,data in ipairs(self.customerQueue) do
				print("hey")
			end
			print(i)
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
